// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bfd-api/bfd-api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	bfd-api/bfd-api.proto

It has these top-level messages:
	StartRequest
	StopRequest
	AddPeerRequest
	AddPeerResponse
	UpdatePeerRequest
	DeletePeerRequest
	ListPeerRequest
	ListPeerResponse
	GetPeerStateRequest
	MonitorPeerRequest
	PeerStateResponse
	DisablePeerRequest
	EnablePeerRequest
	Peer
	Authentication
	PeerState
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionState int32

const (
	SessionState_ADMIN_DOWN SessionState = 0
	SessionState_DOWN       SessionState = 1
	SessionState_INIT       SessionState = 2
	SessionState_UP         SessionState = 3
)

var SessionState_name = map[int32]string{
	0: "ADMIN_DOWN",
	1: "DOWN",
	2: "INIT",
	3: "UP",
}
var SessionState_value = map[string]int32{
	"ADMIN_DOWN": 0,
	"DOWN":       1,
	"INIT":       2,
	"UP":         3,
}

func (x SessionState) String() string {
	return proto.EnumName(SessionState_name, int32(x))
}
func (SessionState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DiagnosticCode int32

const (
	DiagnosticCode_NO_DIAGNOSTIC                  DiagnosticCode = 0
	DiagnosticCode_CONTROL_DETECTION_TIME_EXPIRED DiagnosticCode = 1
	DiagnosticCode_ECHO_FUNCTION_FAILED           DiagnosticCode = 2
	DiagnosticCode_NEIGHBOR_SIGNALED_SESSION_DOWN DiagnosticCode = 3
	DiagnosticCode_FORWARDING_PLANE_RESET         DiagnosticCode = 4
	DiagnosticCode_PATH_DOWN                      DiagnosticCode = 5
	DiagnosticCode_CONCATENATED_PATH_DOWN         DiagnosticCode = 6
	DiagnosticCode_ADMINISTRATIVELY_DOWN          DiagnosticCode = 7
	DiagnosticCode_REVERSE_CONCATENATED_PATH_DOWN DiagnosticCode = 8
)

var DiagnosticCode_name = map[int32]string{
	0: "NO_DIAGNOSTIC",
	1: "CONTROL_DETECTION_TIME_EXPIRED",
	2: "ECHO_FUNCTION_FAILED",
	3: "NEIGHBOR_SIGNALED_SESSION_DOWN",
	4: "FORWARDING_PLANE_RESET",
	5: "PATH_DOWN",
	6: "CONCATENATED_PATH_DOWN",
	7: "ADMINISTRATIVELY_DOWN",
	8: "REVERSE_CONCATENATED_PATH_DOWN",
}
var DiagnosticCode_value = map[string]int32{
	"NO_DIAGNOSTIC":                  0,
	"CONTROL_DETECTION_TIME_EXPIRED": 1,
	"ECHO_FUNCTION_FAILED":           2,
	"NEIGHBOR_SIGNALED_SESSION_DOWN": 3,
	"FORWARDING_PLANE_RESET":         4,
	"PATH_DOWN":                      5,
	"CONCATENATED_PATH_DOWN":         6,
	"ADMINISTRATIVELY_DOWN":          7,
	"REVERSE_CONCATENATED_PATH_DOWN": 8,
}

func (x DiagnosticCode) String() string {
	return proto.EnumName(DiagnosticCode_name, int32(x))
}
func (DiagnosticCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AuthenticationType int32

const (
	AuthenticationType_NONE                  AuthenticationType = 0
	AuthenticationType_SIMPLE_PASSWORD       AuthenticationType = 1
	AuthenticationType_KEYED_MD5             AuthenticationType = 2
	AuthenticationType_METICULOUS_KEYED_MD5  AuthenticationType = 3
	AuthenticationType_KEYED_SHA1            AuthenticationType = 4
	AuthenticationType_METICULOUS_KEYED_SHA1 AuthenticationType = 5
)

var AuthenticationType_name = map[int32]string{
	0: "NONE",
	1: "SIMPLE_PASSWORD",
	2: "KEYED_MD5",
	3: "METICULOUS_KEYED_MD5",
	4: "KEYED_SHA1",
	5: "METICULOUS_KEYED_SHA1",
}
var AuthenticationType_value = map[string]int32{
	"NONE":                  0,
	"SIMPLE_PASSWORD":       1,
	"KEYED_MD5":             2,
	"METICULOUS_KEYED_MD5":  3,
	"KEYED_SHA1":            4,
	"METICULOUS_KEYED_SHA1": 5,
}

func (x AuthenticationType) String() string {
	return proto.EnumName(AuthenticationType_name, int32(x))
}
func (AuthenticationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StartRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port    uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StartRequest) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type StopRequest struct {
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AddPeerRequest struct {
	Peer *Peer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *AddPeerRequest) Reset()                    { *m = AddPeerRequest{} }
func (m *AddPeerRequest) String() string            { return proto.CompactTextString(m) }
func (*AddPeerRequest) ProtoMessage()               {}
func (*AddPeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddPeerRequest) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type AddPeerResponse struct {
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *AddPeerResponse) Reset()                    { *m = AddPeerResponse{} }
func (m *AddPeerResponse) String() string            { return proto.CompactTextString(m) }
func (*AddPeerResponse) ProtoMessage()               {}
func (*AddPeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddPeerResponse) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type UpdatePeerRequest struct {
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Peer *Peer  `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
}

func (m *UpdatePeerRequest) Reset()                    { *m = UpdatePeerRequest{} }
func (m *UpdatePeerRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdatePeerRequest) ProtoMessage()               {}
func (*UpdatePeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdatePeerRequest) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *UpdatePeerRequest) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type DeletePeerRequest struct {
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *DeletePeerRequest) Reset()                    { *m = DeletePeerRequest{} }
func (m *DeletePeerRequest) String() string            { return proto.CompactTextString(m) }
func (*DeletePeerRequest) ProtoMessage()               {}
func (*DeletePeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeletePeerRequest) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type ListPeerRequest struct {
}

func (m *ListPeerRequest) Reset()                    { *m = ListPeerRequest{} }
func (m *ListPeerRequest) String() string            { return proto.CompactTextString(m) }
func (*ListPeerRequest) ProtoMessage()               {}
func (*ListPeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ListPeerResponse struct {
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Peer *Peer  `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
}

func (m *ListPeerResponse) Reset()                    { *m = ListPeerResponse{} }
func (m *ListPeerResponse) String() string            { return proto.CompactTextString(m) }
func (*ListPeerResponse) ProtoMessage()               {}
func (*ListPeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListPeerResponse) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *ListPeerResponse) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

type GetPeerStateRequest struct {
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *GetPeerStateRequest) Reset()                    { *m = GetPeerStateRequest{} }
func (m *GetPeerStateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPeerStateRequest) ProtoMessage()               {}
func (*GetPeerStateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetPeerStateRequest) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type MonitorPeerRequest struct {
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *MonitorPeerRequest) Reset()                    { *m = MonitorPeerRequest{} }
func (m *MonitorPeerRequest) String() string            { return proto.CompactTextString(m) }
func (*MonitorPeerRequest) ProtoMessage()               {}
func (*MonitorPeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MonitorPeerRequest) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type PeerStateResponse struct {
	Local  *PeerState `protobuf:"bytes,1,opt,name=local" json:"local,omitempty"`
	Remote *PeerState `protobuf:"bytes,2,opt,name=remote" json:"remote,omitempty"`
}

func (m *PeerStateResponse) Reset()                    { *m = PeerStateResponse{} }
func (m *PeerStateResponse) String() string            { return proto.CompactTextString(m) }
func (*PeerStateResponse) ProtoMessage()               {}
func (*PeerStateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PeerStateResponse) GetLocal() *PeerState {
	if m != nil {
		return m.Local
	}
	return nil
}

func (m *PeerStateResponse) GetRemote() *PeerState {
	if m != nil {
		return m.Remote
	}
	return nil
}

type DisablePeerRequest struct {
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *DisablePeerRequest) Reset()                    { *m = DisablePeerRequest{} }
func (m *DisablePeerRequest) String() string            { return proto.CompactTextString(m) }
func (*DisablePeerRequest) ProtoMessage()               {}
func (*DisablePeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DisablePeerRequest) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type EnablePeerRequest struct {
	Uuid []byte `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *EnablePeerRequest) Reset()                    { *m = EnablePeerRequest{} }
func (m *EnablePeerRequest) String() string            { return proto.CompactTextString(m) }
func (*EnablePeerRequest) ProtoMessage()               {}
func (*EnablePeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *EnablePeerRequest) GetUuid() []byte {
	if m != nil {
		return m.Uuid
	}
	return nil
}

type Peer struct {
	Name                  string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Address               string          `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	DesiredMinTxInterval  uint32          `protobuf:"varint,3,opt,name=desired_min_tx_interval,json=desiredMinTxInterval" json:"desired_min_tx_interval,omitempty"`
	RequiredMinRxInterval uint32          `protobuf:"varint,4,opt,name=required_min_rx_interval,json=requiredMinRxInterval" json:"required_min_rx_interval,omitempty"`
	DetectMultiplier      uint32          `protobuf:"varint,5,opt,name=detect_multiplier,json=detectMultiplier" json:"detect_multiplier,omitempty"`
	IsMultiHop            bool            `protobuf:"varint,6,opt,name=is_multi_hop,json=isMultiHop" json:"is_multi_hop,omitempty"`
	Authentication        *Authentication `protobuf:"bytes,7,opt,name=authentication" json:"authentication,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Peer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Peer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Peer) GetDesiredMinTxInterval() uint32 {
	if m != nil {
		return m.DesiredMinTxInterval
	}
	return 0
}

func (m *Peer) GetRequiredMinRxInterval() uint32 {
	if m != nil {
		return m.RequiredMinRxInterval
	}
	return 0
}

func (m *Peer) GetDetectMultiplier() uint32 {
	if m != nil {
		return m.DetectMultiplier
	}
	return 0
}

func (m *Peer) GetIsMultiHop() bool {
	if m != nil {
		return m.IsMultiHop
	}
	return false
}

func (m *Peer) GetAuthentication() *Authentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

//
// Password can either start with
// 0x.... -> then it's hex
// or be a string
//
// SimplePassword = 16 bytes
// MD5 = 16 bytes
// SHA1 = 20 bytes
type Authentication struct {
	Type     AuthenticationType `protobuf:"varint,1,opt,name=type,enum=api.AuthenticationType" json:"type,omitempty"`
	Password string             `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *Authentication) Reset()                    { *m = Authentication{} }
func (m *Authentication) String() string            { return proto.CompactTextString(m) }
func (*Authentication) ProtoMessage()               {}
func (*Authentication) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Authentication) GetType() AuthenticationType {
	if m != nil {
		return m.Type
	}
	return AuthenticationType_NONE
}

func (m *Authentication) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type PeerState struct {
	State      SessionState   `protobuf:"varint,1,opt,name=state,enum=api.SessionState" json:"state,omitempty"`
	Diagnostic DiagnosticCode `protobuf:"varint,2,opt,name=diagnostic,enum=api.DiagnosticCode" json:"diagnostic,omitempty"`
}

func (m *PeerState) Reset()                    { *m = PeerState{} }
func (m *PeerState) String() string            { return proto.CompactTextString(m) }
func (*PeerState) ProtoMessage()               {}
func (*PeerState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PeerState) GetState() SessionState {
	if m != nil {
		return m.State
	}
	return SessionState_ADMIN_DOWN
}

func (m *PeerState) GetDiagnostic() DiagnosticCode {
	if m != nil {
		return m.Diagnostic
	}
	return DiagnosticCode_NO_DIAGNOSTIC
}

func init() {
	proto.RegisterType((*StartRequest)(nil), "api.StartRequest")
	proto.RegisterType((*StopRequest)(nil), "api.StopRequest")
	proto.RegisterType((*AddPeerRequest)(nil), "api.AddPeerRequest")
	proto.RegisterType((*AddPeerResponse)(nil), "api.AddPeerResponse")
	proto.RegisterType((*UpdatePeerRequest)(nil), "api.UpdatePeerRequest")
	proto.RegisterType((*DeletePeerRequest)(nil), "api.DeletePeerRequest")
	proto.RegisterType((*ListPeerRequest)(nil), "api.ListPeerRequest")
	proto.RegisterType((*ListPeerResponse)(nil), "api.ListPeerResponse")
	proto.RegisterType((*GetPeerStateRequest)(nil), "api.GetPeerStateRequest")
	proto.RegisterType((*MonitorPeerRequest)(nil), "api.MonitorPeerRequest")
	proto.RegisterType((*PeerStateResponse)(nil), "api.PeerStateResponse")
	proto.RegisterType((*DisablePeerRequest)(nil), "api.DisablePeerRequest")
	proto.RegisterType((*EnablePeerRequest)(nil), "api.EnablePeerRequest")
	proto.RegisterType((*Peer)(nil), "api.Peer")
	proto.RegisterType((*Authentication)(nil), "api.Authentication")
	proto.RegisterType((*PeerState)(nil), "api.PeerState")
	proto.RegisterEnum("api.SessionState", SessionState_name, SessionState_value)
	proto.RegisterEnum("api.DiagnosticCode", DiagnosticCode_name, DiagnosticCode_value)
	proto.RegisterEnum("api.AuthenticationType", AuthenticationType_name, AuthenticationType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BfdApi service

type BfdApiClient interface {
	// Manage the overall server state
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Manage the peers of the bfd server
	AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error)
	UpdatePeer(ctx context.Context, in *UpdatePeerRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeletePeer(ctx context.Context, in *DeletePeerRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	ListPeer(ctx context.Context, in *ListPeerRequest, opts ...grpc.CallOption) (BfdApi_ListPeerClient, error)
	// Manage the state of the peers of the bfd server
	GetPeerState(ctx context.Context, in *GetPeerStateRequest, opts ...grpc.CallOption) (*PeerStateResponse, error)
	MonitorPeer(ctx context.Context, in *MonitorPeerRequest, opts ...grpc.CallOption) (BfdApi_MonitorPeerClient, error)
	DisablePeer(ctx context.Context, in *DisablePeerRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	EnablePeer(ctx context.Context, in *EnablePeerRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type bfdApiClient struct {
	cc *grpc.ClientConn
}

func NewBfdApiClient(cc *grpc.ClientConn) BfdApiClient {
	return &bfdApiClient{cc}
}

func (c *bfdApiClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.BfdApi/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdApiClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.BfdApi/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdApiClient) AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error) {
	out := new(AddPeerResponse)
	err := grpc.Invoke(ctx, "/api.BfdApi/AddPeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdApiClient) UpdatePeer(ctx context.Context, in *UpdatePeerRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.BfdApi/UpdatePeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdApiClient) DeletePeer(ctx context.Context, in *DeletePeerRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.BfdApi/DeletePeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdApiClient) ListPeer(ctx context.Context, in *ListPeerRequest, opts ...grpc.CallOption) (BfdApi_ListPeerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfdApi_serviceDesc.Streams[0], c.cc, "/api.BfdApi/ListPeer", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfdApiListPeerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfdApi_ListPeerClient interface {
	Recv() (*ListPeerResponse, error)
	grpc.ClientStream
}

type bfdApiListPeerClient struct {
	grpc.ClientStream
}

func (x *bfdApiListPeerClient) Recv() (*ListPeerResponse, error) {
	m := new(ListPeerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfdApiClient) GetPeerState(ctx context.Context, in *GetPeerStateRequest, opts ...grpc.CallOption) (*PeerStateResponse, error) {
	out := new(PeerStateResponse)
	err := grpc.Invoke(ctx, "/api.BfdApi/GetPeerState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdApiClient) MonitorPeer(ctx context.Context, in *MonitorPeerRequest, opts ...grpc.CallOption) (BfdApi_MonitorPeerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfdApi_serviceDesc.Streams[1], c.cc, "/api.BfdApi/MonitorPeer", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfdApiMonitorPeerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfdApi_MonitorPeerClient interface {
	Recv() (*PeerStateResponse, error)
	grpc.ClientStream
}

type bfdApiMonitorPeerClient struct {
	grpc.ClientStream
}

func (x *bfdApiMonitorPeerClient) Recv() (*PeerStateResponse, error) {
	m := new(PeerStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfdApiClient) DisablePeer(ctx context.Context, in *DisablePeerRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.BfdApi/DisablePeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfdApiClient) EnablePeer(ctx context.Context, in *EnablePeerRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.BfdApi/EnablePeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfdApi service

type BfdApiServer interface {
	// Manage the overall server state
	Start(context.Context, *StartRequest) (*google_protobuf.Empty, error)
	Stop(context.Context, *StopRequest) (*google_protobuf.Empty, error)
	// Manage the peers of the bfd server
	AddPeer(context.Context, *AddPeerRequest) (*AddPeerResponse, error)
	UpdatePeer(context.Context, *UpdatePeerRequest) (*google_protobuf.Empty, error)
	DeletePeer(context.Context, *DeletePeerRequest) (*google_protobuf.Empty, error)
	ListPeer(*ListPeerRequest, BfdApi_ListPeerServer) error
	// Manage the state of the peers of the bfd server
	GetPeerState(context.Context, *GetPeerStateRequest) (*PeerStateResponse, error)
	MonitorPeer(*MonitorPeerRequest, BfdApi_MonitorPeerServer) error
	DisablePeer(context.Context, *DisablePeerRequest) (*google_protobuf.Empty, error)
	EnablePeer(context.Context, *EnablePeerRequest) (*google_protobuf.Empty, error)
}

func RegisterBfdApiServer(s *grpc.Server, srv BfdApiServer) {
	s.RegisterService(&_BfdApi_serviceDesc, srv)
}

func _BfdApi_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdApiServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BfdApi/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdApiServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfdApi_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdApiServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BfdApi/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdApiServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfdApi_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdApiServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BfdApi/AddPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdApiServer).AddPeer(ctx, req.(*AddPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfdApi_UpdatePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdApiServer).UpdatePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BfdApi/UpdatePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdApiServer).UpdatePeer(ctx, req.(*UpdatePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfdApi_DeletePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdApiServer).DeletePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BfdApi/DeletePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdApiServer).DeletePeer(ctx, req.(*DeletePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfdApi_ListPeer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPeerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfdApiServer).ListPeer(m, &bfdApiListPeerServer{stream})
}

type BfdApi_ListPeerServer interface {
	Send(*ListPeerResponse) error
	grpc.ServerStream
}

type bfdApiListPeerServer struct {
	grpc.ServerStream
}

func (x *bfdApiListPeerServer) Send(m *ListPeerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BfdApi_GetPeerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdApiServer).GetPeerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BfdApi/GetPeerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdApiServer).GetPeerState(ctx, req.(*GetPeerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfdApi_MonitorPeer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorPeerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfdApiServer).MonitorPeer(m, &bfdApiMonitorPeerServer{stream})
}

type BfdApi_MonitorPeerServer interface {
	Send(*PeerStateResponse) error
	grpc.ServerStream
}

type bfdApiMonitorPeerServer struct {
	grpc.ServerStream
}

func (x *bfdApiMonitorPeerServer) Send(m *PeerStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BfdApi_DisablePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdApiServer).DisablePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BfdApi/DisablePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdApiServer).DisablePeer(ctx, req.(*DisablePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BfdApi_EnablePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnablePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BfdApiServer).EnablePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.BfdApi/EnablePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BfdApiServer).EnablePeer(ctx, req.(*EnablePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BfdApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.BfdApi",
	HandlerType: (*BfdApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _BfdApi_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _BfdApi_Stop_Handler,
		},
		{
			MethodName: "AddPeer",
			Handler:    _BfdApi_AddPeer_Handler,
		},
		{
			MethodName: "UpdatePeer",
			Handler:    _BfdApi_UpdatePeer_Handler,
		},
		{
			MethodName: "DeletePeer",
			Handler:    _BfdApi_DeletePeer_Handler,
		},
		{
			MethodName: "GetPeerState",
			Handler:    _BfdApi_GetPeerState_Handler,
		},
		{
			MethodName: "DisablePeer",
			Handler:    _BfdApi_DisablePeer_Handler,
		},
		{
			MethodName: "EnablePeer",
			Handler:    _BfdApi_EnablePeer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPeer",
			Handler:       _BfdApi_ListPeer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MonitorPeer",
			Handler:       _BfdApi_MonitorPeer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bfd-api/bfd-api.proto",
}

func init() { proto.RegisterFile("bfd-api/bfd-api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xed, 0x4e, 0xe3, 0x46,
	0x14, 0x25, 0xc1, 0x09, 0x70, 0x81, 0xe0, 0x0c, 0x1f, 0xeb, 0xa6, 0x6a, 0x85, 0xac, 0xb6, 0x50,
	0x56, 0x05, 0xca, 0x76, 0x55, 0xb5, 0x45, 0xd5, 0x7a, 0xe3, 0x01, 0xac, 0x26, 0x76, 0x64, 0x9b,
	0xa5, 0xfc, 0x1a, 0x19, 0x3c, 0xb0, 0x23, 0x05, 0xdb, 0x6b, 0x4f, 0xda, 0xe5, 0x09, 0xfa, 0xa3,
	0x2f, 0xd3, 0x17, 0xea, 0xbb, 0x54, 0x1e, 0x4f, 0x12, 0x27, 0x21, 0x4b, 0x7f, 0x65, 0x7c, 0xcf,
	0x39, 0x77, 0xce, 0x5c, 0x4f, 0x7c, 0x60, 0xfb, 0xe6, 0x2e, 0xfc, 0x2e, 0x48, 0xd8, 0x91, 0xfc,
	0x3d, 0x4c, 0xd2, 0x98, 0xc7, 0x68, 0x31, 0x48, 0x58, 0xeb, 0xf3, 0xfb, 0x38, 0xbe, 0xef, 0xd3,
	0x23, 0x51, 0xba, 0x19, 0xdc, 0x1d, 0xd1, 0x87, 0x84, 0x3f, 0x16, 0x0c, 0xfd, 0x14, 0xd6, 0x3c,
	0x1e, 0xa4, 0xdc, 0xa5, 0x1f, 0x06, 0x34, 0xe3, 0x48, 0x83, 0xa5, 0x20, 0x0c, 0x53, 0x9a, 0x65,
	0x5a, 0x65, 0xb7, 0xb2, 0xbf, 0xe2, 0x0e, 0x1f, 0x11, 0x02, 0x25, 0x89, 0x53, 0xae, 0x55, 0x77,
	0x2b, 0xfb, 0xeb, 0xae, 0x58, 0xeb, 0xeb, 0xb0, 0xea, 0xf1, 0x38, 0x91, 0x62, 0xfd, 0x08, 0x1a,
	0x46, 0x18, 0xf6, 0x28, 0x4d, 0x87, 0xed, 0xbe, 0x00, 0x25, 0xa1, 0x34, 0x15, 0xbd, 0x56, 0x4f,
	0x56, 0x0e, 0x73, 0x6b, 0x02, 0x17, 0x65, 0xfd, 0x6b, 0xd8, 0x18, 0x09, 0xb2, 0x24, 0x8e, 0x32,
	0x9a, 0x6f, 0x33, 0x18, 0xb0, 0x50, 0x28, 0xd6, 0x5c, 0xb1, 0xd6, 0xcf, 0xa0, 0x79, 0x99, 0x84,
	0x01, 0xa7, 0xe5, 0xd6, 0x4f, 0x10, 0x47, 0xdb, 0x55, 0x9f, 0xde, 0x6e, 0x0f, 0x9a, 0x26, 0xed,
	0xd3, 0x67, 0xfb, 0xe8, 0x4d, 0xd8, 0xe8, 0xb0, 0x8c, 0x97, 0x68, 0x3a, 0x06, 0x75, 0x5c, 0x9a,
	0xef, 0xf5, 0x39, 0x0b, 0xdf, 0xc2, 0xe6, 0x39, 0x15, 0x5d, 0x3c, 0x1e, 0x70, 0xfa, 0x29, 0x13,
	0xfb, 0x80, 0xba, 0x71, 0xc4, 0x78, 0x9c, 0x3e, 0x67, 0x37, 0x80, 0x66, 0xa9, 0xa3, 0x34, 0xf7,
	0x15, 0xd4, 0xfa, 0xf1, 0x6d, 0xd0, 0x97, 0xb3, 0x6f, 0x8c, 0x9c, 0x14, 0xb4, 0x02, 0x44, 0xdf,
	0x40, 0x3d, 0xa5, 0x0f, 0x31, 0xa7, 0xd2, 0xf0, 0x34, 0x4d, 0xa2, 0xb9, 0x19, 0x93, 0x65, 0xc1,
	0x4d, 0xff, 0xd9, 0xd9, 0xed, 0x41, 0x13, 0x47, 0xff, 0x87, 0xf8, 0x4f, 0x15, 0x94, 0x9c, 0x93,
	0x83, 0x51, 0xf0, 0x40, 0xe5, 0x85, 0x13, 0xeb, 0xf2, 0x3d, 0xac, 0x4e, 0xde, 0xc3, 0xd7, 0xf0,
	0x22, 0xa4, 0x19, 0x4b, 0x69, 0x48, 0x1e, 0x58, 0x44, 0xf8, 0x47, 0xc2, 0x22, 0x4e, 0xd3, 0x3f,
	0x82, 0xbe, 0xb6, 0x28, 0xae, 0xe6, 0x96, 0x84, 0xbb, 0x2c, 0xf2, 0x3f, 0x5a, 0x12, 0x43, 0x3f,
	0x82, 0x96, 0xd2, 0x0f, 0x83, 0x91, 0x2e, 0x2d, 0xe9, 0x14, 0xa1, 0xdb, 0x1e, 0xe2, 0x5d, 0x16,
	0xb9, 0x63, 0xe1, 0x4b, 0x68, 0x86, 0x94, 0xd3, 0x5b, 0x4e, 0x1e, 0x06, 0x7d, 0xce, 0x92, 0x3e,
	0xa3, 0xa9, 0x56, 0x13, 0x0a, 0xb5, 0x00, 0xba, 0xa3, 0x3a, 0xda, 0x85, 0x35, 0x96, 0x15, 0x44,
	0xf2, 0x3e, 0x4e, 0xb4, 0xfa, 0x6e, 0x65, 0x7f, 0xd9, 0x05, 0x96, 0x09, 0xce, 0x45, 0x9c, 0xa0,
	0x5f, 0xa0, 0x11, 0x0c, 0xf8, 0x7b, 0x1a, 0x71, 0x76, 0x1b, 0x70, 0x16, 0x47, 0xda, 0x92, 0x18,
	0xfc, 0xa6, 0x18, 0xbc, 0x31, 0x01, 0xb9, 0x53, 0x54, 0xfd, 0x1a, 0x1a, 0x93, 0x0c, 0xf4, 0x12,
	0x14, 0xfe, 0x98, 0x14, 0xb3, 0x6b, 0x9c, 0xbc, 0x78, 0xa2, 0x89, 0xff, 0x98, 0x50, 0x57, 0x90,
	0x50, 0x0b, 0x96, 0x93, 0x20, 0xcb, 0xfe, 0x8c, 0xd3, 0x50, 0x4e, 0x75, 0xf4, 0xac, 0x33, 0x58,
	0x19, 0xbd, 0x75, 0xb4, 0x07, 0xb5, 0x2c, 0x5f, 0xc8, 0xb6, 0x4d, 0xd1, 0xd6, 0xa3, 0x59, 0xc6,
	0xe2, 0x48, 0x5e, 0x1f, 0x81, 0xa3, 0x57, 0x00, 0x21, 0x0b, 0xee, 0xa3, 0x38, 0xe3, 0xec, 0x56,
	0xf4, 0x6c, 0xc8, 0x93, 0x98, 0xa3, 0x72, 0x3b, 0x0e, 0xa9, 0x5b, 0xa2, 0x1d, 0xfc, 0x0c, 0x6b,
	0xe5, 0x5e, 0xa8, 0x01, 0x60, 0x98, 0x5d, 0xcb, 0x26, 0xa6, 0x73, 0x65, 0xab, 0x0b, 0x68, 0x19,
	0x14, 0xb1, 0xaa, 0xe4, 0x2b, 0xcb, 0xb6, 0x7c, 0xb5, 0x8a, 0xea, 0x50, 0xbd, 0xec, 0xa9, 0x8b,
	0x07, 0x7f, 0x57, 0xa1, 0x31, 0xd9, 0x1a, 0x35, 0x61, 0xdd, 0x76, 0x88, 0x69, 0x19, 0xe7, 0xb6,
	0xe3, 0xf9, 0x56, 0x5b, 0x5d, 0x40, 0x3a, 0x7c, 0xd9, 0x76, 0x6c, 0xdf, 0x75, 0x3a, 0xc4, 0xc4,
	0x3e, 0x6e, 0xfb, 0x96, 0x63, 0x13, 0xdf, 0xea, 0x62, 0x82, 0x7f, 0xef, 0x59, 0x2e, 0x36, 0xd5,
	0x0a, 0xd2, 0x60, 0x0b, 0xb7, 0x2f, 0x1c, 0x72, 0x76, 0x69, 0x17, 0xf8, 0x99, 0x61, 0x75, 0xb0,
	0xa9, 0x56, 0x73, 0xb5, 0x8d, 0xad, 0xf3, 0x8b, 0xb7, 0x8e, 0x4b, 0x3c, 0xeb, 0xdc, 0x36, 0x3a,
	0xd8, 0x24, 0x1e, 0xf6, 0xbc, 0x9c, 0x25, 0x9c, 0x2d, 0xa2, 0x16, 0xec, 0x9c, 0x39, 0xee, 0x95,
	0xe1, 0x9a, 0x96, 0x7d, 0x4e, 0x7a, 0x1d, 0xc3, 0xc6, 0xc4, 0xc5, 0x1e, 0xf6, 0x55, 0x05, 0xad,
	0xc3, 0x4a, 0xcf, 0xf0, 0x2f, 0x0a, 0x6a, 0x2d, 0xa7, 0xb6, 0x1d, 0xbb, 0x6d, 0xf8, 0xd8, 0x36,
	0x7c, 0x6c, 0x92, 0x31, 0x56, 0x47, 0x9f, 0xc1, 0xb6, 0x38, 0xba, 0xe5, 0xf9, 0xae, 0xe1, 0x5b,
	0xef, 0x70, 0xe7, 0xba, 0x80, 0x96, 0x72, 0x17, 0x2e, 0x7e, 0x87, 0x5d, 0x0f, 0x93, 0x39, 0xf2,
	0xe5, 0x83, 0xbf, 0x2a, 0x80, 0x66, 0xdf, 0x76, 0x3e, 0x36, 0xdb, 0xb1, 0xb1, 0xba, 0x80, 0x36,
	0x61, 0xc3, 0xb3, 0xba, 0xbd, 0x0e, 0x26, 0x3d, 0xc3, 0xf3, 0xae, 0x1c, 0x37, 0x3f, 0xf9, 0x3a,
	0xac, 0xfc, 0x86, 0xaf, 0xb1, 0x49, 0xba, 0xe6, 0x6b, 0xb5, 0x9a, 0x0f, 0xa2, 0x8b, 0x7d, 0xab,
	0x7d, 0xd9, 0x71, 0x2e, 0x3d, 0x32, 0x46, 0x16, 0xf3, 0x17, 0x53, 0x3c, 0x7a, 0x17, 0xc6, 0xf7,
	0xaa, 0x92, 0xbb, 0x9d, 0x61, 0x0a, 0xa8, 0x76, 0xf2, 0xaf, 0x02, 0xf5, 0xb7, 0x77, 0xa1, 0x91,
	0x30, 0x74, 0x02, 0x35, 0x11, 0x29, 0x48, 0x5e, 0x9b, 0x52, 0xbc, 0xb4, 0x76, 0x0e, 0x8b, 0x30,
	0x3a, 0x1c, 0x86, 0xd1, 0x21, 0xce, 0xc3, 0x08, 0x1d, 0x83, 0x92, 0x07, 0x09, 0x52, 0xa5, 0x64,
	0x94, 0x29, 0x73, 0x15, 0x3f, 0xc0, 0x92, 0x8c, 0x0e, 0x24, 0xff, 0x3a, 0x13, 0xc9, 0xd3, 0xda,
	0x9a, 0x2c, 0xca, 0x8f, 0xe2, 0x29, 0xc0, 0x38, 0x49, 0xd0, 0x8e, 0xe0, 0xcc, 0x44, 0xcb, 0xdc,
	0x3d, 0x4f, 0x01, 0xc6, 0xf9, 0x21, 0xd5, 0x33, 0x81, 0x32, 0x57, 0xfd, 0x13, 0x2c, 0x0f, 0x13,
	0x04, 0x15, 0xee, 0xa6, 0x32, 0xa6, 0xb5, 0x3d, 0x55, 0x2d, 0x4c, 0x1f, 0x57, 0xd0, 0x1b, 0x58,
	0x2b, 0xa7, 0x06, 0xd2, 0x04, 0xf1, 0x89, 0x20, 0x69, 0xed, 0x4c, 0x7d, 0xbf, 0x87, 0x07, 0x7f,
	0x03, 0xab, 0xa5, 0x30, 0x41, 0xc5, 0x87, 0x62, 0x36, 0x5e, 0xe6, 0xe9, 0x8f, 0x2b, 0xe8, 0x57,
	0x58, 0x2d, 0x25, 0x80, 0xec, 0x30, 0x9b, 0x09, 0x9f, 0x1a, 0xde, 0x38, 0x17, 0xe4, 0xf0, 0x66,
	0x82, 0x62, 0x9e, 0xfa, 0xa6, 0x2e, 0x9e, 0x5f, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x6b,
	0x46, 0x2a, 0xe9, 0x08, 0x00, 0x00,
}
